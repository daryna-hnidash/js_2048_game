{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable no-console */ \"use strict\";\nvar gameFieldElement = document.querySelector(\".game-field\");\nvar gameScore = document.querySelector(\".game-score\");\nvar startBtn = document.querySelector(\".button\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageStart = document.querySelector(\".message-start\");\nvar rows = 4;\nvar columns = 4;\nvar score = 0;\nvar gameStarted = false;\nvar gameField = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nstartBtn.addEventListener(\"click\", function() {\n    if (gameStarted) {\n        while(gameFieldElement.firstChild)gameFieldElement.removeChild(gameFieldElement.firstChild);\n        gameField = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n    }\n    messageStart.classList.add(\"hidden\");\n    setGame();\n    gameStarted = true;\n    startBtn.classList.remove(\"start\");\n    startBtn.classList.add(\"restart\");\n    startBtn.textContent = \"Restart\";\n    score = 0;\n    gameScore.innerText = score;\n});\nvar setGame = function() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var cell = document.createElement(\"div\");\n        cell.id = \"\".concat(r, \"-\").concat(c);\n        var num = gameField[r][c];\n        updateCell(cell, num);\n        gameFieldElement.append(cell);\n    }\n    addTile();\n    addTile();\n};\nfunction hasEmptyTile() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (gameField[r][c] === 0) return true;\n    }\n    return false;\n}\nfunction addTile() {\n    if (!hasEmptyTile()) return;\n    var found = false;\n    while(!found){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        var num = Math.random() > 0.1 ? 2 : 4;\n        if (gameField[r][c] === 0) {\n            gameField[r][c] = num;\n            var tile = document.getElementById(r.toString() + \"-\" + c.toString());\n            tile.innerText = num.toString();\n            tile.classList.add(\"field-cell--\" + num);\n            found = true;\n        }\n    }\n}\nfunction isWon() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        if (gameField[r][c] === 2048) return true;\n    }\n    return false;\n}\nfunction isLost() {\n    if (hasEmptyTile()) return false;\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns - 1; c++){\n        if (gameField[r][c] === gameField[r][c + 1]) return false;\n    }\n    for(var r1 = 0; r1 < rows - 1; r1++)for(var c1 = 0; c1 < columns; c1++){\n        if (gameField[r1][c1] === gameField[r1 + 1][c1]) return false;\n    }\n    return true;\n}\ndocument.addEventListener(\"keyup\", function(e) {\n    if (e.code === \"ArrowLeft\") slideLeft();\n    if (e.code === \"ArrowRight\") slideRight();\n    if (e.code === \"ArrowUp\") slideUp();\n    if (e.code === \"ArrowDown\") slideDown();\n    if (isWon()) messageWin.classList.remove(\"hidden\");\n    if (isLost()) messageLose.classList.remove(\"hidden\");\n});\nfunction updateHandler(copyField) {\n    if (copyField.toString() !== gameField.toString()) {\n        gameField = JSON.parse(JSON.stringify(copyField));\n        updateGameField();\n        addTile();\n    }\n}\nfunction updateGameField() {\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var cell = document.getElementById(r.toString() + \"-\" + c.toString());\n        var num = gameField[r][c];\n        updateCell(cell, num);\n    }\n}\nfunction updateCell(cell, num) {\n    cell.innerText = \"\";\n    cell.classList.value = \"\";\n    cell.classList.add(\"field-cell\");\n    if (num > 0) {\n        cell.innerText = num;\n        cell.classList.add(\"field-cell--\".concat(num));\n    }\n}\nfunction slide(row) {\n    var slidedRow = row.filter(function(num) {\n        return num !== 0;\n    });\n    for(var c = 0; c < columns - 1; c++)if (slidedRow[c] === slidedRow[c + 1]) {\n        slidedRow[c] *= 2;\n        slidedRow[c + 1] = 0;\n        score += +slidedRow[c] | 0;\n        gameScore.innerText = score;\n    }\n    slidedRow = slidedRow.filter(function(num) {\n        return num !== 0 && !isNaN(num);\n    });\n    while(slidedRow.length < columns)slidedRow.push(0);\n    return slidedRow;\n}\nfunction slideLeft() {\n    var fieldCopy = JSON.parse(JSON.stringify(gameField));\n    for(var r = 0; r < rows; r++){\n        var row = fieldCopy[r];\n        row = slide(row);\n        fieldCopy[r] = row;\n    }\n    updateHandler(fieldCopy);\n}\nfunction slideRight() {\n    var fieldCopy = JSON.parse(JSON.stringify(gameField));\n    for(var r = 0; r < rows; r++){\n        var row = fieldCopy[r];\n        row = row.reverse();\n        row = slide(row);\n        var newRow = row.reverse();\n        fieldCopy[r] = newRow;\n    }\n    updateHandler(fieldCopy);\n}\nfunction slideUp() {\n    var fieldCopy = JSON.parse(JSON.stringify(gameField));\n    for(var c = 0; c < rows; c++){\n        var row = [\n            fieldCopy[0][c],\n            fieldCopy[1][c],\n            fieldCopy[2][c],\n            fieldCopy[3][c]\n        ];\n        row = slide(row);\n        for(var index = 0; index < rows; index++)fieldCopy[index][c] = row[index];\n    }\n    updateHandler(fieldCopy);\n}\nfunction slideDown() {\n    var fieldCopy = JSON.parse(JSON.stringify(gameField));\n    for(var c = 0; c < rows; c++){\n        var row = [\n            fieldCopy[0][c],\n            fieldCopy[1][c],\n            fieldCopy[2][c],\n            fieldCopy[3][c]\n        ];\n        row = slide(row.reverse());\n        row = row.reverse();\n        for(var index = 0; index < rows; index++)fieldCopy[index][c] = row[index];\n    }\n    updateHandler(fieldCopy);\n}\n\n//# sourceMappingURL=index.f050b7ea.js.map\n","/* eslint-disable no-console */\n'use strict';\n\nconst gameFieldElement = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.button');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst rows = 4;\nconst columns = 4;\nlet score = 0;\nlet gameStarted = false;\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartBtn.addEventListener('click', () => {\n  if (gameStarted) {\n    while (gameFieldElement.firstChild) {\n      gameFieldElement.removeChild(gameFieldElement.firstChild);\n    }\n\n    gameField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n\n  messageStart.classList.add('hidden');\n  setGame();\n  gameStarted = true;\n\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n  startBtn.textContent = 'Restart';\n  score = 0;\n  gameScore.innerText = score;\n});\n\nconst setGame = () => {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = document.createElement('div');\n\n      cell.id = `${r}-${c}`;\n\n      const num = gameField[r][c];\n\n      updateCell(cell, num);\n      gameFieldElement.append(cell);\n    }\n  }\n\n  addTile();\n  addTile();\n};\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (gameField[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction addTile() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n    const num = Math.random() > 0.1 ? 2 : 4;\n\n    if (gameField[r][c] === 0) {\n      gameField[r][c] = num;\n\n      const tile = document.getElementById(r.toString() + '-' + c.toString());\n\n      tile.innerText = num.toString();\n      tile.classList.add('field-cell--' + num);\n      found = true;\n    }\n  }\n}\n\nfunction isWon() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (gameField[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isLost() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (gameField[r][c] === gameField[r][c + 1]) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < rows - 1; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (gameField[r][c] === gameField[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keyup', (e) => {\n  if (e.code === 'ArrowLeft') {\n    slideLeft();\n  }\n\n  if (e.code === 'ArrowRight') {\n    slideRight();\n  }\n\n  if (e.code === 'ArrowUp') {\n    slideUp();\n  }\n\n  if (e.code === 'ArrowDown') {\n    slideDown();\n  }\n\n  if (isWon()) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (isLost()) {\n    messageLose.classList.remove('hidden');\n  }\n});\n\nfunction updateHandler(copyField) {\n  if (copyField.toString() !== gameField.toString()) {\n    gameField = JSON.parse(JSON.stringify(copyField));\n\n    updateGameField();\n    addTile();\n  }\n}\n\nfunction updateGameField() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const cell = document.getElementById(r.toString() + '-' + c.toString());\n      const num = gameField[r][c];\n\n      updateCell(cell, num);\n    }\n  }\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.classList.value = '';\n  cell.classList.add('field-cell');\n\n  if (num > 0) {\n    cell.innerText = num;\n    cell.classList.add(`field-cell--${num}`);\n  }\n}\n\nfunction slide(row) {\n  let slidedRow = row.filter(num => num !== 0);\n\n  for (let c = 0; c < columns - 1; c++) {\n    if (slidedRow[c] === slidedRow[c + 1]) {\n      slidedRow[c] *= 2;\n      slidedRow[c + 1] = 0;\n      score += +slidedRow[c] | 0;\n      gameScore.innerText = score;\n    }\n  }\n  slidedRow = slidedRow.filter(num => num !== 0 && !isNaN(num));\n\n  while (slidedRow.length < columns) {\n    slidedRow.push(0);\n  };\n\n  return slidedRow;\n}\n\nfunction slideLeft() {\n  const fieldCopy = JSON.parse(JSON.stringify(gameField));\n\n  for (let r = 0; r < rows; r++) {\n    let row = fieldCopy[r];\n\n    row = slide(row);\n    fieldCopy[r] = row;\n  };\n\n  updateHandler(fieldCopy);\n};\n\nfunction slideRight() {\n  const fieldCopy = JSON.parse(JSON.stringify(gameField));\n\n  for (let r = 0; r < rows; r++) {\n    let row = fieldCopy[r];\n\n    row = row.reverse();\n    row = slide(row);\n\n    const newRow = row.reverse();\n\n    fieldCopy[r] = newRow;\n  };\n\n  updateHandler(fieldCopy);\n};\n\nfunction slideUp() {\n  const fieldCopy = JSON.parse(JSON.stringify(gameField));\n\n  for (let c = 0; c < rows; c++) {\n    let row = [\n      fieldCopy[0][c],\n      fieldCopy[1][c],\n      fieldCopy[2][c],\n      fieldCopy[3][c],\n    ];\n\n    row = slide(row);\n\n    for (let index = 0; index < rows; index++) {\n      fieldCopy[index][c] = row[index];\n    }\n  };\n\n  updateHandler(fieldCopy);\n};\n\nfunction slideDown() {\n  const fieldCopy = JSON.parse(JSON.stringify(gameField));\n\n  for (let c = 0; c < rows; c++) {\n    let row = [\n      fieldCopy[0][c],\n      fieldCopy[1][c],\n      fieldCopy[2][c],\n      fieldCopy[3][c],\n    ];\n\n    row = slide(row.reverse());\n    row = row.reverse();\n\n    for (let index = 0; index < rows; index++) {\n      fieldCopy[index][c] = row[index];\n    }\n  };\n\n  updateHandler(fieldCopy);\n};\n"],"names":["gameFieldElement","document","querySelector","gameScore","startBtn","messageLose","messageWin","messageStart","score","gameStarted","gameField","addEventListener","firstChild","removeChild","classList","add","setGame","remove","textContent","innerText","r","c","cell","createElement","id","concat","updateCell","append","addTile","hasEmptyTile","found","Math","floor","random","num","tile","getElementById","toString","updateHandler","copyField","JSON","parse","stringify","updateGameField","value","slide","row","slidedRow","filter","columns","isNaN","length","push","e","code","slideLeft","fieldCopy","slideRight","newRow","reverse","slideUp","index","slideDown","isWon","isLost","r1","rows","c1"],"version":3,"file":"index.f050b7ea.js.map"}